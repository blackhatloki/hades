#!/usr/bin/perl

use Socket;
use Getopt::Std;
use Net::Ping;
use File::Copy;

$recommendedilo = "1.78";
$recommendedoa = "2.52";
%recommendedbios = ( 
"ProLiant BL460c G1" => "I15 07/10/2009",
"HP ProLiant BL460c G1" => "I15 07/10/2009",
"ProLiant BL460c G5" => "I23 07/10/2009",
"ProLiant BL460c G6" => "I24 07/25/2009",
"ProLiant BL465c G1" => "A13 07/27/2009",
"ProLiant BL465c G5" => "A13 07/27/2009",
"ProLiant BL680c G5" => "I17 07/10/2009",
"HP ProLiant BL680c G5" => "I17 07/10/2009",
"HP ProLiant BL685c" => "A08 01/29/2009",
"HP ProLiant BL685c G1" => "A08 01/29/2009",
"ProLiant BL685c G1" => "A08 01/29/2009",
"ProLiant BL685c G5" => "A08 01/29/2009",
"ProLiant xw460c Blade Workstation" => "ZZZZZZZZZ",
"BL460c G1" => "I15 07/10/2009",
"BL460c G5" => "I23 07/10/2009",
"BL460c G6" => "I24 07/25/2009",
"BL465c G1" => "A13 07/27/2009",
"BL465c G5" => "A13 07/27/2009",
"BL680c G5" => "I17 07/10/2009",
"BL685c" => "A08 01/29/2009",
"BL685c G1" => "A08 01/29/2009",
"BL685c G5" => "A08 01/29/2009",
"xw460c Blade Workstation" => "ZZZZZZZZZ",
);

%email = {};
$email{"RDO AM AD Systems"}{"Linux"} = "it-tis-rdo-am-ad-ops@credit-suisse.com";
$email{"RDO AM AD Systems"}{"Win2003"} = "it-tis-rdo-am-ad-ops@credit-suisse.com";
$email{"RDO AM AD Systems"}{"ESX"} = "it-tis-rdo-am-ad-ops@credit-suisse.com";
$email{"RDO AM Asset Management Systems"}{"Linux"} = "tis-rdo-am-asset-mgmt@credit-suisse.com";
$email{"RDO AM Asset Management Systems"}{"Win2003"} = "tis-rdo-am-asset-mgmt@credit-suisse.com";
$email{"RDO AM Asset Management Systems"}{"ESX"} = "tis-rdo-am-asset-mgmt@credit-suisse.com";
$email{"RDO AM Corporate Systems"}{"Linux"} = "rdo-am-unixcorp-syst@credit-suisse.com";
$email{"RDO AM Corporate Systems"}{"Win2003"} = "rdo-am-windows-corp-sys@credit-suisse.com";
$email{"RDO AM Corporate Systems"}{"ESX"} = "rdo-am-windows-corp-sys@credit-suisse.com";
$email{"RDO AM EQT & Prime Services Systems"}{"Linux"} = "tis-rdo-am-unix-eqps@credit-suisse.com";
$email{"RDO AM EQT & Prime Services Systems"}{"ESX"} = "tis-rdo-am-wind-eqps@credit-suisse.com";
$email{"RDO AM EQT LL AES Systems"}{"Linux"} = "list.tis-rdo-am-ll-aes-support@credit-suisse.com";
$email{"RDO AM EQT LL AES Systems"}{"Win2003"} = "list.tis-rdo-am-ll-aes-support@credit-suisse.com";
$email{"RDO AM EQT LL AES Systems"}{"ESX"} = "list.tis-rdo-am-ll-aes-support@credit-suisse.com";
$email{"RDO AM EQT Prop Systems"}{"Linux"} = "tis-rdo-am-prop-sup@credit-suisse.com";
$email{"RDO AM EQT Prop Systems"}{"Win2003"} = "tis-rdo-am-prop-sup@credit-suisse.com";
$email{"RDO AM EQT Prop Systems"}{"ESX"} = "tis-rdo-am-prop-sup@credit-suisse.com";
$email{"RDO AM FID & Derivatives Systems"}{"Linux"} = "tis-rdo-am-unix-fid@credit-suisse.com";
$email{"RDO AM FID & Derivatives Systems"}{"Win2003"} = "tis-rdo-am-wind-fid@credit-suisse.com";
$email{"RDO AM FID & Derivatives Systems"}{"ESX"} = "tis-rdo-am-wind-fid@credit-suisse.com";
$email{"RDO AM IB Operations Systems"}{"Linux"} = "rdo-am-unix-ib-ops@credit-suisse.com";
$email{"RDO AM IB Operations Systems"}{"Win2003"} = "rdo-am-windows-ib-ops@credit-suisse.com";
$email{"RDO AM IB Operations Systems"}{"ESX"} = "rdo-am-windows-ib-ops@credit-suisse.com";
$email{"RDO AM TIS & PB Systems"}{"Linux"} = "rdo-am-unixtis-pb@credit-suisse.com";
$email{"RDO AM TIS & PB Systems"}{"Win2003"} = "rdo-am-windows-tis-pb@credit-suisse.com";
$email{"RDO AM TIS & PB Systems"}{"ESX"} = "rdo-am-windows-tis-pb@credit-suisse.com";
$email{"Unix Support AP"}{"Linux"} = "it-tis-rdo-apac-unix@credit-suisse.com";
$email{"TIS RDO APAC Unix Systems"}{"Linux"} = "it-tis-rdo-apac-unix@credit-suisse.com";
$email{"TIS RDO APAC Windows Systems"}{"Win2003"} = "it-tis-rdo-apac-windows@credit-suisse.com";
$email{"TIS RDO APAC Windows Systems"}{"ESX"} = "it-tis-rdo-apac-windows@credit-suisse.com";
$email{"TIS RDO EMEA DO Asset Management"}{"Linux"} = "rdo-emea-do-am-unix@credit-suisse.com";
$email{"TIS RDO EMEA DO Asset Management"}{"Win2003"} = "rdo-emea-do-am-win@credit-suisse.com";
$email{"TIS RDO EMEA DO Asset Management"}{"ESX"} = "rdo-emea-do-am-win@credit-suisse.com";
$email{"TIS RDO EMEA DO EQ & PS Systems"}{"Linux"} = "it-tis-rdo-emea-do-unix-eq-ps@credit-suisse.com";
$email{"TIS RDO EMEA DO EQ & PS Systems"}{"Win2003"} = "it-tis-rdo-emea-do-windows-eq-ps@credit-suisse.com";
$email{"TIS RDO EMEA DO EQ & PS Systems"}{"ESX"} = "it-tis-rdo-emea-do-windows-eq-ps@credit-suisse.com";
$email{"TIS RDO EMEA DO FID Systems"}{"Linux"} = "it-tis-rdo-emea-do-unix-fr-drv@credit-suisse.com";
$email{"TIS RDO EMEA DO FID Systems"}{"Win2003"} = "it-tis-rdo-emea-do-windows-fi-drv@credit-suisse.com";
$email{"TIS RDO EMEA DO FID Systems"}{"ESX"} = "it-tis-rdo-emea-do-windows-fi-drv@credit-suisse.com";
$email{"TIS RDO EMEA DO IBO & BO Systems"}{"Linux"} = "it-tis-rdo-emea-do-unix-spi-other@credit-suisse.com";
$email{"TIS RDO EMEA DO IBO & BO Systems"}{"Win2003"} = "it-tis-rdo-emea-do-windows-spi-other@credit-suisse.com";
$email{"TIS RDO EMEA DO IBO & BO Systems"}{"ESX"} = "it-tis-rdo-emea-do-windows-spi-other@credit-suisse.com";
$email{"TIS RDO EMEA DO Prop Systems"}{"Linux"} = "tis-rdo-am-prop-sup@credit-suisse.com";
$email{"TIS RDO EMEA DO Prop Systems"}{"Win2003"} = "tis-rdo-am-prop-sup@credit-suisse.com";
$email{"TIS RDO EMEA DO Prop Systems"}{"ESX"} = "tis-rdo-am-prop-sup@credit-suisse.com";

# purely doing this step so that the above BIOS list is manageable
for $model (keys %recommendedbios) {
	$recommendedbios{$model} =~ s#^(\w+)\s+(\d+)/(\d+)/(\d+)$#$1 $4 $2 $3#;
}

getopts('c', \%opt);

@date=localtime(time);
$date[5] += 1900;
$date[4] += 1;
if ($date[4]<10) {
	$date[4] = "0$date[4]";
}
if ($date[3]<10) {
	$date[3] = "0$date[3]";
}
@findmonday = localtime(time - ( (($date[6] > 1) ? -1 + $date[6] : 6 + $date[6]) * 60 * 60 * 24));
$findmonday[5] += 1900;
$findmonday[4] += 1;
if ($findmonday[4]<10) {
	$findmonday[4] = "0$findmonday[4]";
}
if ($findmonday[3]<10) {
	$findmonday[3] = "0$findmonday[3]";
}
$monday = "$findmonday[5]-$findmonday[4]-$findmonday[3]";

$stamp="${date[5]}${date[4]}${date[3]}";
$DIR = "/app/in_dev/HP_Chassis_Sweep/jim";
$OUT = "$DIR/hp-inventory.csv";
$DATECOPY = "$DIR/hp-inventory-${stamp}.csv";
$CHASSIS_LIST = "$DIR/chassis_list";

@list=@ARGV;
%chassis={};
if ($opt{"c"} or $#list == -1) {
	@list=`cat $CHASSIS_LIST`;
} else {
	$OUT = "&STDOUT";
}

#print "@list\n";

$p = Net::Ping->new( "icmp", 1, 64 );
for $oa (sort @list) {
	chomp $oa;
	if ( ! $p->ping($oa) ) {
    		if (! $opt{"c"}) { print "WARNING: $oa does not ping\n"; }
		next;
	}
	
	if (! $opt{"c"}) { print "processing $oa\n"; }
	@raw = `expect -f $DIR/SweepChassisInventory $oa 2>/dev/null`;
	if (! $opt{"c"}) { print "finished processing $oa\n"; }

	$state = "none";
	$blade = "error";
	$mezz = "error";
	$bay = "error";
	for $line (@raw) {
		chomp $line;
		$line =~ s///g;
		#print "$line\n";
		if ($line =~ m/Server Blade #([0-9]+) [Ii]nformation:/) {
			($t) = ($1);
			$state = "blade";
			$blade = $t;
		} elsif ($line =~ m/Onboard Administrator #([0-9]+) [Ii]nformation:/) {
			($t) = ($1);
			$state = "blade";
			$blade = "oa$t";
			$chassis{$oa}{$blade}{ilotype} = "OA";
		} elsif ($line =~ m/Onboard Administrator #([0-9]+) [Nn]etwork [Ii]nformation:/) {
			($t) = ($1);
			$state = "oanet";
			$blade = "oa$t";
		} elsif ($line =~ m/Management Processor Information:/) {
			$state = "ilo";
		} elsif ($state eq "blade" && $line =~ m/Type:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{type}) = ($1);
			$chassis{$oa}{$blade}{type} =~ s/No Server /No /;
		} elsif ($line =~ m/Manufacturer\s*:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{manufacturer}) = ($1);
		} elsif ($state ne "interconnect" && $line =~ m/Product Name\s*:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{model}) = ($1);
			$chassis{$oa}{$blade}{model} =~ s/Onboard Administrator/OA/;
			$chassis{$oa}{$blade}{model} =~ s/HP ProLiant //;
			$chassis{$oa}{$blade}{model} =~ s/ProLiant //;
			$chassis{$oa}{$blade}{model} =~ s/ with KVM//;
			$chassis{$oa}{$blade}{model} =~ s/BladeSystem /BS /;
		} elsif ($line =~ m/System Board Spare Part Number: +(\w.*)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{syssparepart}) = ($1);
		} elsif ($line =~ m/Spare Part No.\s*: +(\w.*)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{syssparepart}) = ($1);
		} elsif ($line =~ m/Part Number\s*: +(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{part}) = ($1);
		} elsif ($line =~ m#Physical Serial Number / UUID:\s+(\w+)\s+/\s+(\w+)\s*[:cntrl:]*#) {
			($chassis{$oa}{$blade}{serial},$chassis{$oa}{$blade}{uuid}) = ($1,$2);
		} elsif ($state ne "administratortray" && $state ne "enclosureinfo" && $state ne "interconnect" && $line =~ m#Serial Number\s*:\s+(\w.+\w)\s*[:cntrl:]*#) {
			($chassis{$oa}{$blade}{serial}) = ($1);
		} elsif ($line =~ m#UUID:\s+(\w.+\w)\s*[:cntrl:]*#) {
			($chassis{$oa}{$blade}{uuid}) = ($1);
		} elsif ($line =~ m/Server Name:\s+(\w.*\w*)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{hostname}) = ($1);
			$chassis{$oa}{$blade}{hostname} =~ s/\..*$//;
		} elsif ($line =~ m/Asset Tag:\s+(\w.*\w*)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{asset}) = ($1);
		} elsif ($line =~ m#ROM Version:\s+(\w.*\w)\s*[:cntrl:]*$#) {
			my ($bios) = ($1);
			$chassis{$oa}{$blade}{bios} = $bios;
			my $biosdatesort = $bios;
			$biosdatesort =~ s#^(\w+)\s+(\d+)/(\d+)/(\d+)$#$1 $4 $2 $3#;
			if ($biosdatesort ge $recommendedbios{$chassis{$oa}{$blade}{model}}) {
				$chassis{$oa}{$blade}{biosupgrade} = "OK";
			} else {
				$chassis{$oa}{$blade}{biosupgrade} = "Upgrade";
			}
		} elsif ($line =~ m/CPU ([0-9]+):\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($one,$two) = ($1,$2);
			$chassis{$oa}{$blade}{cpu}{$two} += 1;
		} elsif ($line =~ m/Memory:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{memory}) = ($1);
		} elsif ($line =~ m/NIC ([0-9]+) MAC Address:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{nicmac}{$1}) = ($2);
		} elsif ($line =~ m/iSCSI ([0-9]+) MAC Address:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{iscsimac}{$1}) = ($2);
		} elsif ($state eq "ilo" && $line =~ m/Type:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{ilotype}) = ($1);
		} elsif ($state eq "blade" && $line =~ m/Hw Version\s*:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{part}) = ($1);
		} elsif ($state eq "ilo" && $line =~ m/Name:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{ilohostname}) = ($1);
		} elsif ($state eq "oanet" && $line =~ m/Name:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{ilohostname}) = ($1);
		} elsif ($state eq "ilo" && $line =~ m/Firmware Version\w*:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			my ($ilofirm) = ($1);
			$chassis{$oa}{$blade}{ilofirmware} = $ilofirm;
			if ($ilofirm ge $recommendedilo) {
				$chassis{$oa}{$blade}{oailoupgrade} = "OK";
			} else {
				$chassis{$oa}{$blade}{oailoupgrade} = "Upgrade";
			}
		} elsif ($state eq "blade" && $line =~ m/Firmware Ver.\s+:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($oafirm) = ($1);
			$chassis{$oa}{$blade}{ilofirmware} = $oafirm;
			if ($chassis{$oa}{$blade}{model} =~ /c7000/) {
				if ($oafirm ge $recommendedoa) {
					$chassis{$oa}{$blade}{oailoupgrade} = "OK";
				} else {
					$chassis{$oa}{$blade}{oailoupgrade} = "Upgrade";
				}
			} else {
				if ($oafirm ge $recommendedilo) {
					$chassis{$oa}{$blade}{oailoupgrade} = "OK";
				} else {
					$chassis{$oa}{$blade}{oailoupgrade} = "Upgrade";
				}
			}
		} elsif ($state eq "ilo" && $line =~ m/IP Address\s*:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{iloip}) = ($1);
			$chassis{$oa}{$blade}{iloresolve} = gethostbyaddr(inet_aton($chassis{$oa}{$blade}{iloip}), AF_INET);
		} elsif ($state eq "oanet" && $line =~ m/IP Address\s*:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{iloip}) = ($1);
			$chassis{$oa}{$blade}{iloresolve} = gethostbyaddr(inet_aton($chassis{$oa}{$blade}{iloip}), AF_INET);
			$chassis{$oa}{$blade}{hostname} = $chassis{$oa}{$blade}{iloresolve};
			$chassis{$oa}{$blade}{hostname} =~ s/\..*$//;
		} elsif ($state eq "ilo" && $line =~ m/MAC Address:\s(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{ilomac}) = ($1);
		} elsif ($line =~ /^Blade #([0-9]+) Status/) {
			($blade) = ($1);
			$state = "bladestatus";
		} elsif ($state eq "bladestatus" && $line =~ /^\s+Power:\s+(\w+)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{powerstate}) = ($1);
		} elsif ($state eq "bladestatus" && $line =~ /^\s+Current Wattage used:\s+(\w+)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{wattage}) = ($1);
		} elsif ($state eq "bladestatus" && $line =~ /^\s+Health:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{health}) = ($1);
		} elsif ($state eq "bladestatus" && $line =~ /^\s+Diagnostic Status:\s*[:cntrl:]*$/) {
			$state = "bladediags";
		} elsif ($state eq "bladediags" && $line =~ /^\s+(\w.*\w)\s+(\w+)\s*[:cntrl:]*$/) {
			($k,$v) = ($1,$2);
			$chassis{$oa}{$blade}{diag}{$k} = $v;
			if ($v eq "OK") {
				$chassis{$oa}{$blade}{okdiag}{$k} = $v;
			} else {
				$chassis{$oa}{$blade}{notokdiag}{$k} = $v;
			}
		} elsif ($line =~ /^Onboard Administrator #([0-9]+) Status:/) {
			($t) = ($1);
			$state = "oastatus";
			$blade = "oa$t";
		} elsif ($state eq "oastatus" && $line =~ /^\s+Role:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{powerstate}) = ($1);
		} elsif ($state eq "oastatus" && $line =~ /^\s+Status:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{health}) = ($1);
		} elsif ($line =~ /^Enclosure Information:/) {
			$state = "enclosureinfo";
			$blade = "encl";
		} elsif ($state eq "enclosureinfo" && $line =~ /^\s+Enclosure Name:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($name) = ($1);
			$chassis{$oa}{$blade}{hostname} = $name;
		} elsif ($state eq "enclosureinfo" && $line =~ /^\s+Enclosure Type:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{model}) = ($1);
			$chassis{$oa}{$blade}{model} =~ s/BladeSystem /BS /;
		} elsif ($state eq "enclosureinfo" && $line =~ /^\s+Serial Number:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{serial}) = ($1);
		} elsif ($line =~ /^\s+Onboard Administrator Tray Information/) {
			$state = "administratortray";
		} elsif ($line =~ /^Enclosure:/) {
			$state = "enclosurestatus";
			$blade = "encl";
		} elsif ($state eq "enclosurestatus" && $line =~ /^\s+Status:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{health}) = ($1);
		} elsif ($state eq "enclosurestatus" && $line =~ /^\s+Diagnostic Status:\s*[:cntrl:]*$/) {
			$state = "enclosurediags";
		} elsif ($state eq "enclosurediags" && $line =~ /^\s*[:cntrl:]*$/) {
			$state = "enclosurestatus";
		} elsif ($state eq "enclosurediags" && $line =~ /^\s+(\w.*\w)\s+(\w+)\s*[:cntrl:]*$/) {
			($k,$v) = ($1,$2);
			$chassis{$oa}{$blade}{diag}{$k} = $v;
			if ($v eq "OK") {
				$chassis{$oa}{$blade}{okdiag}{$k} = $v;
			} else {
				$chassis{$oa}{$blade}{notokdiag}{$k} = $v;
			}
		} elsif ($state eq "enclosurestatus" && $line =~ /^Power Subsystem:\s*[:cntrl:]*$/) {
			$state = "powersubsystemdiags";
		} elsif ($state eq "powersubsystemdiags" && $line =~ /^\s*[:cntrl:]*$/) {
			$state = "enclosurestatus";
		} elsif ($state eq "powersubsystemdiags" && $line =~ /^\s+Status:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($v) = ($1);
			$k = "PowerSubsystem";
			$chassis{$oa}{$blade}{diag}{$k} = $v;
			if ($v eq "OK") {
				$chassis{$oa}{$blade}{okdiag}{$k} = $v;
			} else {
				$chassis{$oa}{$blade}{notokdiag}{$k} = $v;
			}
		} elsif ($state eq "powersubsystemdiags" && $line =~ /^\s+Power Mode:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($chassis{$oa}{$blade}{powerstate}) = ($1);
			$chassis{$oa}{$blade}{powerstate} =~ s/Power Supply Redund.*/Power Supp Redt/;
		} elsif ($state eq "powersubsystemdiags" && $line =~ /^\s+Power Capacity:\s+(\w+)\s+.*$/) {
			($chassis{$oa}{$blade}{ilohostname}) = ($1);
		} elsif ($state eq "powersubsystemdiags" && $line =~ /^\s+Present Power:\s+(\w+)\s+.*$/) {
			($chassis{$oa}{$blade}{wattage}) = ($1);
		} elsif ($state eq "enclosurestatus" && $line =~ /^Cooling Subsystem:\s*[:cntrl:]*$/) {
			$state = "coolingsubsystemdiags";
		} elsif ($state eq "coolingsubsystemdiags" && $line =~ /^\s*[:cntrl:]*$/) {
			$state = "enclosurestatus";
		} elsif ($state eq "coolingsubsystemdiags" && $line =~ /^\s+Status:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($v) = ($1);
			$k = "CoolingSubsystem";
			$chassis{$oa}{$blade}{diag}{$k} = $v;
			if ($v eq "OK") {
				$chassis{$oa}{$blade}{okdiag}{$k} = $v;
			} else {
				$chassis{$oa}{$blade}{notokdiag}{$k} = $v;
			}
		} elsif ($line =~ /^Mezz\s+Mezz\s+.*Interconnect\s+Interconnect/) {
			$state = "bladeportmap";
		} elsif ($state eq "bladeportmap" && $line =~ /Embedded Ethernet/) {
			$mezz = "embedded";
		} elsif ($state eq "bladeportmap" && $line =~ /^-+\s+Blade\s+0*([1-9][0-9]*)\s+-+/) {
			($blade) = ($1);
		} elsif ($state eq "bladeportmap" && $line =~ /^\s+([1-9])\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($mezz,$mezzpart) = ($1,$2);
			$mezzpart =~ s/ Module for c-Class BladeSystem//;
			$mezzpart =~ s/ Module for HP c-Class BladeSystem//;
			$mezzpart =~ s/ for c-Class BladeSystem//;
			$mezzpart =~ s/ for HP c-Class BladeSystem//;
			$mezzpart =~ s/Cisco Catalyst Blade Switch /Cisco Switch /;
			$mezzpart =~ s/ for HP//;
			$mezzpart =~ s/^HP //;
			$mezzpart =~ s/ Multifunction BL-c Adapter//;
			$mezzpart =~ s/Multifunction //;
			$mezzpart =~ s/FC HBA/HBA/;
			$chassis{$oa}{$blade}{mezz}{$mezz}{part} = $mezzpart;
		} elsif ($state eq "bladeportmap" && $line =~ /^\s+Port\s+([0-9]+)\s+(\w.*\w)\s+Bay\s+([0-9]+)\s+Port\s+([0-9]+)\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($port,$portstatus,$bay,$bayport,$macwwn) = ($1,$2,$3,$4,$5);
			$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{status} = $portstatus;
			$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{bay} = $bay;
			$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{bayport} = $bayport;
			$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{macwwn} = $macwwn;
		} elsif ($line =~ /^([1-8])\.\s+(\w+)\s*[:cntrl:]*$/) {
			($bay,$cabling) = ($1,$2);
			$state = "interconnect";
			$blade = "encl";
			if ($bay == 1 || $bay == 2) {
				$mezz = "embedded";
				$port = $bay;
			} else {
				$mezz = int(($bay - 1) / 2);
				$port = 2 - ($bay % 2);
			}
			$chassis{$oa}{$blade}{interconnect}{$bay}{cabling} = $cabling;
			$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{bayport} = $cabling;
		} elsif ($state eq "interconnect" && $line =~ /^\s+Product Name:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($model) = ($1);
			$model =~ s/Cisco Catalyst Blade Switch /Cisco Switch /;
			$model =~ s/ Module for HP c-Class BladeSystem//;
			$model =~ s/ Module for c-Class BladeSystem//;
			$model =~ s/ for HP c-Class BladeSystem//;
			$model =~ s/ for HP//;
			$model =~ s/^HP //;
			$model =~ s/ Multifunction BL-c Adapter//;
			$model =~ s/ for c-Class BladeSystem//;
			$model =~ s/Multifunction //;
			$model =~ s/FC HBA/HBA/;
			$chassis{$oa}{$blade}{interconnect}{$blade}{part} = $model;
			$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{macwwn} = $model;
		} elsif ($state eq "interconnect" && $line =~ /^\s+Width:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($width) = ($1);
			$chassis{$oa}{$blade}{interconnect}{$blade}{width} = $width;
			$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{bay} = $width;
		} elsif ($state eq "interconnect" && $line =~ /^\s+User Assigned Name:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($name) = ($1);
			$chassis{$oa}{$blade}{interconnect}{$blade}{hostname} = $name;
			$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{bay} = $name;
		} elsif ($line =~ /^Interconnect Module #([1-8]) Status:\s*[:cntrl:]*$/) {
			($bay) = ($1);
			$blade = "encl";
			if ($bay == 1 || $bay == 2) {
				$mezz = "embedded";
				$port = $bay;
			} else {
				$mezz = int(($bay - 1) / 2);
				$port = 2 - ($bay % 2);
			}
			$state = "interconnectstatus";
		} elsif ($state eq "interconnectstatus" && $line =~ /^\s+Status\s*:\s+(\w.*\w)\s*[:cntrl:]*$/) {
			($status) = ($1);
			$chassis{$oa}{$blade}{interconnect}{$bay}{status} = $status;
			$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{status} = $status;
		} # end state engine
	}
}

# integrate the CoreDB inventory
# command = wget -q -O - http://snyc11p12050.corpny.csfb.com/GSIDocs/GSI_Inventory_Reports/00-Combined-Inventory-2009-08-24.csv 

$command = "/usr/bin/wget -q -O -";
$baseurl = "http://snyc11p12050.corpny.csfb.com/GSIDocs/GSI_Inventory_Reports";
$fileurl = "00-Combined-Inventory-$monday.csv";

%inventory = {};
#print "$command $baseurl/$fileurl\n\n";
open INV, "$command $baseurl/$fileurl|" or print "\nERROR: Can't do wget for inventory:\n$command $baseurl/$fileurl\n$!\n\n";
while ($input = <INV>) {
	chomp $input;
	chomp $input;
	$input =~ s///g;
	$input =~ s/"([^",]*),([^",]*)"/"$1_$2"/g;
	$input =~ s/"([^",]*),([^",]*),([^",]*)"/"$1_$2_$3"/g;
	my @inv = split /,/, $input;
# 0 Hostname    	# 20 Backup_Hostname    	# 40 bm_console_name
# 1 Status      	# 21 Backup_Schedule    	# 41 bm_console_ip
# 2 OS  		# 22 Compute_Farm       	# 42 obrel
# 3 Region      	# 23 virtual_pool_name  	# 43 Asset_Tag
# 4 Site        	# 24 parent_hostname    	# 44 IS_chp
# 5 Vendor      	# 25 server_class_desc  	# 45 CHP_supp_level
# 6 Supp_Team   	# 26 virtual_template_type      # 46 CHP_decomm_date
# 7 Server_Type 	# 27 lease_start_date   	# 47 Bottom_rack_u
# 8 Model       	# 28 lease_end_date     	# 48 Reboot_exception
# 9 Cpu_Num     	# 29 virt_res_cap       	# 49 Reboot_exc_rvw_date
# 10 Num_apps   	# 30 Last_Reboot        	# 50 Reboot_exc_approver
# 11 OSVer      	# 31 Uptime     		# 51 Auto_reboot
# 12 OSRel      	# 32 Uptime_treshold    	# 52 Auto_reboot_rvw_date
# 13 CSGRel     	# 33 Last_Uptime_update 	# 53 Auto_reboot_approver
# 14 Memory     	# 34 RPT_os     		# 54 Last_dist
# 15 RIB_name   	# 35 hostname_id        	# 55 Solaris_hostid
# 16 RIB_ipaddress      # 36 Coll_run_date      	# 56 Serial_num
# 17 Cab        	# 37 srv_console_name   	# 57 DNS
# 18 Backup_Status      # 38 srv_console_ip     	# 58 Created_date
# 19 Backup_RFC 	# 39 srv_console_port   	# 59 Server_age
	my ($host,  $status,$os,    $region,$site,  $suppteam,$cab,    $serial) = 
	   ($inv[0],$inv[1],$inv[2],$inv[3],$inv[4],$inv[6],  $inv[17],$inv[56]);
	next if ($region ne "AM" && $region ne "UN");
	$status =~ s#/.*$##;
	$status =~ s#Pending Deco.*$#Pend#;
	$inventory{$host}{status} = $status;
	$inventory{$host}{os} = $os;
	$inventory{$host}{site} = $site;
	$inventory{$host}{suppteam} = $suppteam;
	$inventory{$host}{suppteam} =~ s/^RDO AM //;
	$inventory{$host}{suppteam} =~ s/ Systems$//;
	$inventory{$host}{suppteam} =~ s/ Prime Services/ PS/;
	$inventory{$host}{suppteam} =~ s/Corporate/Corp Sys/;
	$inventory{$host}{suppteam} =~ s/FID & Derivatives$/FIDS/;
	$inventory{$host}{cab} = $cab;
	$inventory{$host}{serial} = $serial;
}
close INV;
# cut to here

$fileurl = "00-Servers-Apps-Owners-$monday.csv";
%appowners = {};
#print "$command $baseurl/$fileurl\n\n";
open INV, "$command $baseurl/$fileurl|" or print "\nERROR: Can't do wget for inventory:\n$command $baseurl/$fileurl\n$!\n\n";
while ($input = <INV>) {
	chomp $input;
	chomp $input;
	$input =~ s///g;
	$input =~ s/"([^",]*),([^",]*)"/"$1_$2"/g;
	$input =~ s/"([^",]*),([^",]*),([^",]*)"/"$1_$2_$3"/g;
	my @inv = split /,/, $input;
# 1	Hostname	# 10	System_Dept	# 19	Last_Uptime_update
# 2	OS		# 11	Business_Dept	# 20	Grips_ID
# 3	Region		# 12	DR_hostname	# 21	App_Name
# 4	DNS		# 13	Model		# 22	App_Criticality
# 5	Site		# 14	OSRel		# 23	ITOwner_name
# 6	Vendor		# 15	Cab		# 24	Business_Owner
# 7	Supp_Team	# 16	Last_Reboot	# 25	AppDisposition
# 8	Status		# 17	Uptime		# 26	Hostname_id
# 9	Server_Type	# 18	Uptime_treshold	# 27	CATI_ID

	my ($host, $region, $grips, $appname, $cati) = 
	   ($inv[0],$inv[2],$inv[19],$inv[20],$inv[26]);
	next if ($region ne "AM" && $region ne "UN");
	$inventory{$host}{appname} = $appname;
	$inventory{$host}{grips} = $grips;
	$inventory{$host}{cati} = $cati;
}
close INV;
# cut to here

open OUT, ">$OUT" or die "\nERROR: Can't open output file:\n$OUT\n$!\n\n";

print OUT "OA,Slot,Name,Power,Health,OA/IloUp?,BIOSUp?,Status,OS,AppName,SuppTeam,CAB,Model,Serial,CurrWatts*,OA/IloType,OA/IloName,OA/IloIP,OA/IloIPResolvesTo,OA/IloFirmware,BIOS,CPU,Memory,BladeDiagExtended=NotOK,ObP1_Status,ObP1_Bay,ObP1_Port,ObP1_UUID,ObP2_Status,ObP2_Bay,ObP2_Port,ObP2_UUID,ObP3_Status,ObP3_Bay,ObP3_Port,ObP3_UUID,ObP4_Status,ObP4_Bay,ObP4_Port,ObP4_UUID,Mez1_Part,Mez1P1_Status,Mez1P1_Bay,Mez1P1_Port,Mez1P1_UUID,Mez1P2_Status,Mez1P2_Bay,Mez1P2_Port,Mez1P2_UUID,Mez2_Part,Mez2P1_Status,Mez2P1_Bay,Mez2P1_Port,Mez2P1_UUID,Mez2P2_Status,Mez2P2_Bay,Mez2P2_Port,Mez2P2_UUID,Mez3_Part,Mez3P1_Status,Mez3P1_Bay,Mez3P1_Port,Mez3P1_UUID,Mez3P2_Status,Mez3P2_Bay,Mez3P2_Port,Mez3P2_UUID,(*)Please note: CurrWatts may not be Maximum Wattage!,GRIPs,CATI\n";

for $oa (sort keys %chassis) {
for $blade (sort sortblades keys %{ $chassis{$oa} }) {
	my $host = "";
	print OUT "$oa,$blade,";
	if ($blade =~ /(oa|encl)/ || ${chassis{$oa}{$blade}{type}} eq "Server Blade") {
		print OUT "${chassis{$oa}{$blade}{hostname}},";
		$host = $chassis{$oa}{$blade}{hostname};
		$host =~ tr/[A-Z]/[a-z]/;
	} else {
		print OUT "${chassis{$oa}{$blade}{type}},";
	}
	print OUT "${chassis{$oa}{$blade}{powerstate}},${chassis{$oa}{$blade}{health}},${chassis{$oa}{$blade}{oailoupgrade}},${chassis{$oa}{$blade}{biosupgrade}},${inventory{$host}{status}},${inventory{$host}{os}},${inventory{$host}{appname}},${inventory{$host}{suppteam}},${inventory{$host}{cab}},${chassis{$oa}{$blade}{model}},${chassis{$oa}{$blade}{serial}},${chassis{$oa}{$blade}{wattage}},${chassis{$oa}{$blade}{ilotype}},${chassis{$oa}{$blade}{ilohostname}},${chassis{$oa}{$blade}{iloip}},${chassis{$oa}{$blade}{iloresolve}},${chassis{$oa}{$blade}{ilofirmware}},${chassis{$oa}{$blade}{bios}},";
	for $cpu (sort keys %{ ${chassis{$oa}{$blade}{cpu}} }) {
		print OUT "${chassis{$oa}{$blade}{cpu}{$cpu}}x${cpu} ";
	}
	print OUT ",${chassis{$oa}{$blade}{memory}},";
	for $diag (sort keys %{ ${chassis{$oa}{$blade}{notokdiag}} }) {
		print OUT "$diag=${chassis{$oa}{$blade}{notokdiag}{$diag}}&";
	}
	print OUT ",";
	#my @okdiag = sort keys %{ ${chassis{$oa}{$blade}{okdiag}} };
	#if ($#okdiag > 0) {
	#	print OUT "OK=";
	#}
	#print OUT "" . (join '&',@okdiag);
	#print OUT ",";
	$minimumport=4;
	$portie=0;
	for $port (sort {$a <=> $b} keys %{ $chassis{$oa}{$blade}{mezz}{embedded}{port} }) {
		$portie++;
		print OUT "$chassis{$oa}{$blade}{mezz}{embedded}{port}{$port}{status},";
		print OUT "$chassis{$oa}{$blade}{mezz}{embedded}{port}{$port}{bay},";
		print OUT "$chassis{$oa}{$blade}{mezz}{embedded}{port}{$port}{bayport},";
		print OUT "$chassis{$oa}{$blade}{mezz}{embedded}{port}{$port}{macwwn},";
	}
	for ($i=$portie; $i < $minimumport; $i++) {
		print OUT ",,,,";
	}
	$minimummezz=3;
	$mezzie=0;
	for $mezz (sort {$a <=> $b} keys %{ $chassis{$oa}{$blade}{mezz} }) {
		next if ($mezz eq "embedded");
		$mezzie++;
		$minimumport=2;
		$portie=0;
		print OUT "$chassis{$oa}{$blade}{mezz}{$mezz}{part},";
		for $port (sort {$a <=> $b} keys %{ $chassis{$oa}{$blade}{mezz}{$mezz}{port} }) {
			$portie++;
			print OUT "$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{status},";
			print OUT "$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{bay},";
			print OUT "$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{bayport},";
			print OUT "$chassis{$oa}{$blade}{mezz}{$mezz}{port}{$port}{macwwn},";
		}
		for ($i=$portie; $i < $minimumport; $i++) {
			print OUT ",,,,";
		}
	}
	for ($i=$mezzie; $i < $minimummezz; $i++) {
		print OUT ",,,,,,,,,";
	}

	print OUT "X,${inventory{$host}{grips}},${inventory{$host}{cati}}\n";
} }
close OUT;

if ($opt{"c"}) { copy($OUT,$DATECOPY); }

sub sortblades() {
        if ($a =~ /[cso]/ && $b =~ /[cso]/) {
                return ($a cmp $b);
        } elsif ($a =~ /[cso]/ || $b =~ /[cso]/) {
                return ($b cmp $a);
        } else {
                return ($a <=> $b);
        }
}

